"use strict";

var cmark = require("commonmark");

exports.parseAST = function (markdown) {
  var transform = function (items) {
    for (var _iterator = items[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {
      var item = _step.value;
      if (item.children) {
        transform(item.children);
      }

      // Split lines of code for fenced code, to improve diffs
      if (item.t === "FencedCode") {
        item.inline_content = item.string_content.split("\n").slice(0, -1).map(function (l) {
          return ({ t: "CodeLine", c: l });
        });
        item.string_content = null;
      }
    }
  };

  var reader = new cmark.DocParser();
  var ast = reader.parse(markdown);
  transform([ast]);
  return ast;
};
"use strict";

var shapes = {
  document: "note",
  block: "box",
  inline: "oval" };


var solarizedLight = {
  back: "#fdf6e3",
  fill: "#eee8d5",
  font: "#073642",
  strg: "#586e75",
  edge: "#002b36",
  code: "#268bd2" };

var solarizedDark = {
  back: "#002b36",
  fill: "#073642",
  font: "#fdf6e3",
  strg: "#eee8d5",
  edge: "#93a1a1",
  code: "#2aa198" };

exports.palettes = { solarizedLight: solarizedLight, solarizedDark: solarizedDark };


var defaults = {
  palette: solarizedLight,
  fontsize: 14,
  fontname: "Inconsolata" };


exports.exportDot = function (ast, filename, options) {
  if (options === undefined) options = {};
  var pal = options.palette || defaults.palette;
  var size = options.fontsize || defaults.fontsize;
  var font = options.fontname || defaults.fontname;

  var out = ["digraph \"" + filename + "\" {", "graph [rankdir=\"LR\", bgcolor=\"" + pal.back + "\"];", "node [style=\"filled\", fontcolor=\"" + pal.font + "\", fillcolor=\"" + pal.fill + "\", color=\"" + pal.edge + "\", fontsize=" + size + ", fontname=\"" + font + "\"];", "edge [color=\"" + pal.edge + "\"];"];
  var n = 0;

  var builder = function (items, type) {
    var ids = [];
    for (var _iterator = items[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {
      var item = _step.value;
      var id = n++;
      var children = [];
      if (item.children) {
        children = children.concat(builder(item.children, "block"));
      }
      if (item.inline_content) {
        children = children.concat(builder(item.inline_content, "inline"));
      }
      if (Array.isArray(item.c)) {
        children = children.concat(builder(item.c, "inline"));
      }
      if (Array.isArray(item.label)) {
        children = children.concat(builder(item.label, "inline"));
      }
      var shape = shapes[type];
      var label = item.t;
      var more = "";
      if (item.t === "Str") {
        label = "'" + item.c + "'";
        more = ", fontcolor=\"" + pal.strg + "\"";
      } else if (item.t === "CodeLine" || item.t === "Code") {
        label = item.c;
        more = ", fontcolor=\"" + pal.code + "\"";
      } else if (item.t === "Link") {
        more = ", href=\"" + item.destination + "\"";
      }
      label = label.replace(/["\\]/g, "\\$&");
      out.push("  n" + id + " [label=\"" + label + "\", shape=\"" + shape + "\"" + more + "];");
      for (var _iterator2 = children[Symbol.iterator](), _step2; !(_step2 = _iterator2.next()).done;) {
        var child = _step2.value;
        out.push("  n" + id + " -> n" + child + ";");
      }

      ids.push(id);
    }

    return ids;
  };

  builder([ast], "document");
  out.push("}");
  return out.join("\n");
};
//# sourceMappingURL=data:application/json;base64,