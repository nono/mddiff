"use strict";
var cmark = require("cmark");

exports.parseAST = function(markdown) {
  var transform = function(items) {
    for (var _iterator = items[Symbol.iterator](), _step; !(_step = _iterator.next()).done; ) {
      var _item = _step.value;
      if (_item.children) {
        transform(_item.children);
      }

      // Split lines of code for fenced code, to improve diffs
      if (_item.t === "FencedCode") {
        _item.inline_content = _item.string_content.split("\n")
          .map(function(l) {
          return { t: "CodeLine", c: l };
        });
        _item.string_content = null;
      }
    }
  };

  var _reader = new cmark.DocParser();
  var _ast = _reader.parse(markdown);
  transform([_ast]);
  return _ast;
};

"use strict";
var shapes = {
  document: "note",
  block: "box",
  inline: "oval",
};


var solarizedLight = {
  back: "#fdf6e3",
  fill: "#eee8d5",
  font: "#073642",
  strg: "#586e75",
  edge: "#002b36",
  code: "#268bd2",
};

var solarizedDark = {
  back: "#002b36",
  fill: "#073642",
  font: "#fdf6e3",
  strg: "#eee8d5",
  edge: "#93a1a1",
  code: "#2aa198",
};

exports.palettes = { solarizedLight: solarizedLight, solarizedDark: solarizedDark };


var defaults = {
  palette: solarizedLight,
  fontsize: 14,
  fontname: "Inconsolata",
};


exports.exportDot = function(ast, filename, options) {
  if (options === undefined)
    options = {};

  var _pal  = options.palette  || defaults.palette;
  var _size = options.fontsize || defaults.fontsize;
  var _font = options.fontname || defaults.fontname;

  var _out = ["digraph \"" + filename + "\" {",
             "graph [rankdir=\"LR\", bgcolor=\"" + _pal.back + "\"];",
             "node [style=\"filled\", fontcolor=\"" + _pal.font + "\", fillcolor=\"" + _pal.fill + "\", color=\"" + _pal.edge + "\", fontsize=" + _size + ", fontname=\"" + _font + "\"];",
             "edge [color=\"" + _pal.edge + "\"];"
            ];
  var _n = 0;

  var builder = function(_n) {
    return function(_out) {
      return function(_pal) {
        return function(items, type) {
          var _ids = [];

          for (var _iterator = items[Symbol.iterator](), _step; !(_step = _iterator.next()).done; ) {
            var _item = _step.value;
            var _id = _n++;
            var _children = [];
            if (_item.children) {
              _children = _children.concat(builder(_item.children, "block"));
            }
            if (_item.inline_content) {
              _children = _children.concat(builder(_item.inline_content, "inline"));
            }
            if (Array.isArray(_item.c)) {
              _children = _children.concat(builder(_item.c, "inline"));
            }
            if (Array.isArray(_item.label)) {
              _children = _children.concat(builder(_item.label, "inline"));
            }
            var _shape = shapes[type];
            var _label = _item.t;
            var _more = "";
            if (_item.t === "Str") {
              _label = "'" + _item.c + "'";
              _more = ", fontcolor=\"" + _pal.strg + "\"";
            } else if (_item.t === "CodeLine" || _item.t === "Code") {
              _label = _item.c;
              _more = ", fontcolor=\"" + _pal.code + "\"";
            } else if (_item.t === "Link") {
              _more = ", href=\"" + _item.destination + "\"";
            }
            _label = _label.replace(/["\\]/g, "\\$&");
            _out.push("  n" + _id + " [label=\"" + _label + "\", shape=\"" + _shape + "\"" + _more + "];");

            for (var _child, t$5$0 = regeneratorRuntime.values(_children), t$5$1; !(t$5$1 = t$5$0.next()).done; ) {
              _child = t$5$1.value;
              _out.push("  n" + _id + " -> n" + _child + ";");
            }

            _ids.push(_id);
          }

          return _ids;
        };
      };
    };
  }(_n)(_out)(_pal);

  builder([ast], "document");
  _out.push('}');
  return _out.join("\n");
};

//# sourceMappingURL=data:application/json;base64,