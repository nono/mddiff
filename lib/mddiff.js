"use strict";

var CMark = require("commonmark");
var VNode = require("virtual-dom/vnode/vnode");
var VText = require("virtual-dom/vnode/vtext");

exports.parseAST = function (markdown) {
  var reader = new CMark.Parser();
  var parsed = reader.parse(markdown);
  var walker = parsed.walker();

  var stack = [];
  var event = undefined;
  while (event = walker.next()) {
    var node = event.node;
    if (!event.entering) {
      // TODO props
      var children = stack.shift();
      var current = new VNode(node.type, {}, children);
      if (stack.length) {
        stack[0].push(current);
      } else {
        return current;
      }
    } else if (node.isContainer()) {
      stack.unshift([]);
    } else if (node.type === "Text") {
      var text = new VText(node.literal);
      stack[0].push(text);
    } else if (node.type === "CodeBlock") {
      var lines = node.literal.split("\n");
      lines.pop();
      lines = lines.map(function (line) {
        return new VText(line);
      });
      var code = new VNode(node.type, {}, lines);
      stack[0].push(code);
    } else {
      // TODO props
      // TODO literal inside it
      var leaf = new VNode(node.type, {});
      stack[0].push(leaf);
    }
  }

  throw new Error("Oops, can't create AST. It shouldn't happen...");
};
"use strict";

var vdiff = require("virtual-dom/diff");

exports.diff = vdiff;
"use strict";

var shapes = {
  document: "note",
  block: "box",
  inline: "oval" };


var solarizedLight = {
  back: "#fdf6e3",
  fill: "#eee8d5",
  font: "#073642",
  strg: "#586e75",
  edge: "#002b36",
  code: "#268bd2" };

var solarizedDark = {
  back: "#002b36",
  fill: "#073642",
  font: "#fdf6e3",
  strg: "#eee8d5",
  edge: "#93a1a1",
  code: "#2aa198" };

exports.palettes = { solarizedLight: solarizedLight, solarizedDark: solarizedDark };


var defaults = {
  palette: solarizedLight,
  fontsize: 14,
  fontname: "Inconsolata" };


exports.exportDot = function (ast, filename) {
  var options = arguments[2] === undefined ? {} : arguments[2];
  var pal = options.palette || defaults.palette;
  var size = options.fontsize || defaults.fontsize;
  var font = options.fontname || defaults.fontname;

  var out = ["digraph \"" + filename + "\" {", "graph [rankdir=\"LR\", bgcolor=\"" + pal.back + "\"];", "node [style=\"filled\", fontcolor=\"" + pal.font + "\", fillcolor=\"" + pal.fill + "\", color=\"" + pal.edge + "\", fontsize=" + size + ", fontname=\"" + font + "\"];", "edge [color=\"" + pal.edge + "\"];"];
  var n = 0;

  var builder = function (items, parent) {
    var ids = [];
    for (var _iterator = items[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {
      var item = _step.value;
      var id = n++;
      var children = [];
      var shape = shapes.inline;
      var label = item.tagName;
      var more = "";
      if (item.children) {
        children = builder(item.children, item.tagName);
        shape = shapes.block;
      }
      if (item.tagName === "Document") {
        shape = shapes.document;
      } else if (parent === "CodeBlock" || parent === "Code") {
        label = item.text;
        more = ", fontcolor=\"" + pal.code + "\"";
      } else if (item.type === "VirtualText") {
        label = "'" + item.text + "'";
        more = ", fontcolor=\"" + pal.strg + "\"";
      } else if (item.tagName === "Link" || item.tagName === "Image") {
        more = ", href=\"" + item.properties.href + "\"";
      }
      label = label.replace(/["\\]/g, "\\$&");
      out.push("  n" + id + " [label=\"" + label + "\", shape=\"" + shape + "\"" + more + "];");
      for (var _iterator2 = children[Symbol.iterator](), _step2; !(_step2 = _iterator2.next()).done;) {
        var child = _step2.value;
        out.push("  n" + id + " -> n" + child + ";");
      }
      ids.push(id);
    }
    return ids;
  };

  builder([ast]);
  out.push("}");
  return out.join("\n");
};
"use strict";

var fs = require("fs");

exports.readStdinOrFile = function (filename) {
  return new Promise(function (resolve, reject) {
    if (filename === "-") {
      (function () {
        var chunks = [];
        process.stdin.setEncoding("utf8");
        process.stdin.on("readable", function () {
          var chunk = process.stdin.read();
          if (chunk !== null) {
            chunks.push(chunk);
          }
        });
        process.stdin.on("end", function () {
          resolve(chunks.join(""));
        });
      })();
    } else {
      fs.readFile(filename, { encoding: "utf8" }, function (err, data) {
        if (err) {
          return reject("Error on reading " + filename + ": " + err);
        }
        resolve(data);
      });
    }
  });
};
//# sourceMappingURL=data:application/json;base64,