"use strict";

var cmark = require("commonmark");

exports.parseAST = function (markdown) {
  var reader = new cmark.Parser();
  var parsed = reader.parse(markdown);
  return parsed;
};
"use strict";

var shapes = {
  document: "note",
  block: "box",
  inline: "oval" };


var solarizedLight = {
  back: "#fdf6e3",
  fill: "#eee8d5",
  font: "#073642",
  strg: "#586e75",
  edge: "#002b36",
  code: "#268bd2" };

var solarizedDark = {
  back: "#002b36",
  fill: "#073642",
  font: "#fdf6e3",
  strg: "#eee8d5",
  edge: "#93a1a1",
  code: "#2aa198" };

exports.palettes = { solarizedLight: solarizedLight, solarizedDark: solarizedDark };


var defaults = {
  palette: solarizedLight,
  fontsize: 14,
  fontname: "Inconsolata" };


exports.exportDot = function (ast, filename) {
  var options = arguments[2] === undefined ? {} : arguments[2];
  var pal = options.palette || defaults.palette;
  var size = options.fontsize || defaults.fontsize;
  var font = options.fontname || defaults.fontname;

  var out = ["digraph \"" + filename + "\" {", "graph [rankdir=\"LR\", bgcolor=\"" + pal.back + "\"];", "node [style=\"filled\", fontcolor=\"" + pal.font + "\", fillcolor=\"" + pal.fill + "\", color=\"" + pal.edge + "\", fontsize=" + size + ", fontname=\"" + font + "\"];", "edge [color=\"" + pal.edge + "\"];"];
  var n = 0;

  var builder = function (items, type) {
    var ids = [];
    for (var _iterator = items[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {
      var item = _step.value;
      var id = n++;
      var children = [];
      if (item.children) {
        children = children.concat(builder(item.children, "block"));
      }
      if (item.inline_content) {
        children = children.concat(builder(item.inline_content, "inline"));
      }
      if (Array.isArray(item.c)) {
        children = children.concat(builder(item.c, "inline"));
      }
      if (Array.isArray(item.label)) {
        children = children.concat(builder(item.label, "inline"));
      }
      var shape = shapes[type];
      var label = item.t;
      var more = "";
      if (item.t === "Str") {
        label = "'" + item.c + "'";
        more = ", fontcolor=\"" + pal.strg + "\"";
      } else if (item.t === "CodeLine" || item.t === "Code") {
        label = item.c;
        more = ", fontcolor=\"" + pal.code + "\"";
      } else if (item.t === "Link") {
        more = ", href=\"" + item.destination + "\"";
      }
      label = label.replace(/["\\]/g, "\\$&");
      out.push("  n" + id + " [label=\"" + label + "\", shape=\"" + shape + "\"" + more + "];");
      for (var _iterator2 = children[Symbol.iterator](), _step2; !(_step2 = _iterator2.next()).done;) {
        var child = _step2.value;
        out.push("  n" + id + " -> n" + child + ";");
      }
      ids.push(id);
    }
    return ids;
  };

  builder([ast], "document");
  out.push("}");
  return out.join("\n");
};
//# sourceMappingURL=data:application/json;base64,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QUMsSUFBSSxTQUFRLEVBQUUsYUFBVSxLQUFLLE9BQUssQ0FBQztPQUN4QztBQUNELFNBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDZDtBQUNELFdBQU8sR0FBRyxDQUFDO0dBQ1osQ0FBQzs7QUFFRixTQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUMzQixLQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2QsU0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQ3ZCLENBQUMiLCJmaWxlIjoibWRkaWZmLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNtYXJrID0gcmVxdWlyZShcImNvbW1vbm1hcmtcIik7XG5cbmV4cG9ydHMucGFyc2VBU1QgPSBmdW5jdGlvbihtYXJrZG93bikge1xuICBsZXQgcmVhZGVyID0gbmV3IGNtYXJrLlBhcnNlcigpO1xuICBsZXQgcGFyc2VkID0gcmVhZGVyLnBhcnNlKG1hcmtkb3duKTtcbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCJ2YXIgc2hhcGVzID0ge1xuICBkb2N1bWVudDogXCJub3RlXCIsXG4gIGJsb2NrOiBcImJveFwiLFxuICBpbmxpbmU6IFwib3ZhbFwiLFxufTtcblxuXG52YXIgc29sYXJpemVkTGlnaHQgPSB7XG4gIGJhY2s6IFwiI2ZkZjZlM1wiLFxuICBmaWxsOiBcIiNlZWU4ZDVcIixcbiAgZm9udDogXCIjMDczNjQyXCIsXG4gIHN0cmc6IFwiIzU4NmU3NVwiLFxuICBlZGdlOiBcIiMwMDJiMzZcIixcbiAgY29kZTogXCIjMjY4YmQyXCIsXG59O1xuXG52YXIgc29sYXJpemVkRGFyayA9IHtcbiAgYmFjazogXCIjMDAyYjM2XCIsXG4gIGZpbGw6IFwiIzA3MzY0MlwiLFxuICBmb250OiBcIiNmZGY2ZTNcIixcbiAgc3RyZzogXCIjZWVlOGQ1XCIsXG4gIGVkZ2U6IFwiIzkzYTFhMVwiLFxuICBjb2RlOiBcIiMyYWExOThcIixcbn07XG5cbmV4cG9ydHMucGFsZXR0ZXMgPSB7IHNvbGFyaXplZExpZ2h0LCBzb2xhcml6ZWREYXJrIH07XG5cblxudmFyIGRlZmF1bHRzID0ge1xuICBwYWxldHRlOiBzb2xhcml6ZWRMaWdodCxcbiAgZm9udHNpemU6IDE0LFxuICBmb250bmFtZTogXCJJbmNvbnNvbGF0YVwiLFxufTtcblxuXG5leHBvcnRzLmV4cG9ydERvdCA9IGZ1bmN0aW9uKGFzdCwgZmlsZW5hbWUsIG9wdGlvbnM9e30pIHtcbiAgbGV0IHBhbCAgPSBvcHRpb25zLnBhbGV0dGUgIHx8IGRlZmF1bHRzLnBhbGV0dGU7XG4gIGxldCBzaXplID0gb3B0aW9ucy5mb250c2l6ZSB8fCBkZWZhdWx0cy5mb250c2l6ZTtcbiAgbGV0IGZvbnQgPSBvcHRpb25zLmZvbnRuYW1lIHx8IGRlZmF1bHRzLmZvbnRuYW1lO1xuXG4gIGxldCBvdXQgPSBbYGRpZ3JhcGggXCIkeyBmaWxlbmFtZSB9XCIge2AsXG4gICAgICAgICAgICAgYGdyYXBoIFtyYW5rZGlyPVwiTFJcIiwgYmdjb2xvcj1cIiR7cGFsLmJhY2t9XCJdO2AsXG4gICAgICAgICAgICAgYG5vZGUgW3N0eWxlPVwiZmlsbGVkXCIsIGZvbnRjb2xvcj1cIiR7cGFsLmZvbnR9XCIsIGZpbGxjb2xvcj1cIiR7IHBhbC5maWxsIH1cIiwgY29sb3I9XCIkeyBwYWwuZWRnZSB9XCIsIGZvbnRzaXplPSR7IHNpemUgfSwgZm9udG5hbWU9XCIkeyBmb250IH1cIl07YCxcbiAgICAgICAgICAgICBgZWRnZSBbY29sb3I9XCIkeyBwYWwuZWRnZSB9XCJdO2BcbiAgICAgICAgICAgIF07XG4gIGxldCBuID0gMDtcblxuICB2YXIgYnVpbGRlciA9IGZ1bmN0aW9uKGl0ZW1zLCB0eXBlKSB7XG4gICAgbGV0IGlkcyA9IFtdO1xuICAgIGZvciAobGV0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgIGxldCBpZCA9IG4rKztcbiAgICAgIGxldCBjaGlsZHJlbiA9IFtdO1xuICAgICAgaWYgKGl0ZW0uY2hpbGRyZW4pIHtcbiAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5jb25jYXQoYnVpbGRlcihpdGVtLmNoaWxkcmVuLCBcImJsb2NrXCIpKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtLmlubGluZV9jb250ZW50KSB7XG4gICAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uY29uY2F0KGJ1aWxkZXIoaXRlbS5pbmxpbmVfY29udGVudCwgXCJpbmxpbmVcIikpO1xuICAgICAgfVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbS5jKSkge1xuICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmNvbmNhdChidWlsZGVyKGl0ZW0uYywgXCJpbmxpbmVcIikpO1xuICAgICAgfVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbS5sYWJlbCkpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5jb25jYXQoYnVpbGRlcihpdGVtLmxhYmVsLCBcImlubGluZVwiKSk7XG4gICAgICB9XG4gICAgICBsZXQgc2hhcGUgPSBzaGFwZXNbdHlwZV07XG4gICAgICBsZXQgbGFiZWwgPSBpdGVtLnQ7XG4gICAgICBsZXQgbW9yZSA9IFwiXCI7XG4gICAgICBpZiAoaXRlbS50ID09PSBcIlN0clwiKSB7XG4gICAgICAgIGxhYmVsID0gYCckeyBpdGVtLmMgfSdgO1xuICAgICAgICBtb3JlID0gYCwgZm9udGNvbG9yPVwiJHsgcGFsLnN0cmcgfVwiYDtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbS50ID09PSBcIkNvZGVMaW5lXCIgfHwgaXRlbS50ID09PSBcIkNvZGVcIikge1xuICAgICAgICBsYWJlbCA9IGl0ZW0uYztcbiAgICAgICAgbW9yZSA9IGAsIGZvbnRjb2xvcj1cIiR7IHBhbC5jb2RlIH1cImA7XG4gICAgICB9IGVsc2UgaWYgKGl0ZW0udCA9PT0gXCJMaW5rXCIpIHtcbiAgICAgICAgbW9yZSA9IGAsIGhyZWY9XCIkeyBpdGVtLmRlc3RpbmF0aW9uIH1cImA7XG4gICAgICB9XG4gICAgICBsYWJlbCA9IGxhYmVsLnJlcGxhY2UoL1tcIlxcXFxdL2csIFwiXFxcXCQmXCIpO1xuICAgICAgb3V0LnB1c2goYCAgbiR7IGlkIH0gW2xhYmVsPVwiJHsgbGFiZWwgfVwiLCBzaGFwZT1cIiR7IHNoYXBlIH1cIiR7IG1vcmUgfV07YCk7XG4gICAgICBmb3IgKGxldCBjaGlsZCBvZiBjaGlsZHJlbikge1xuICAgICAgICBvdXQucHVzaChgICBuJHsgaWQgfSAtPiBuJHsgY2hpbGQgfTtgKTtcbiAgICAgIH1cbiAgICAgIGlkcy5wdXNoKGlkKTtcbiAgICB9XG4gICAgcmV0dXJuIGlkcztcbiAgfTtcblxuICBidWlsZGVyKFthc3RdLCBcImRvY3VtZW50XCIpO1xuICBvdXQucHVzaCgnfScpO1xuICByZXR1cm4gb3V0LmpvaW4oXCJcXG5cIik7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9