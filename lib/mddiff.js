"use strict";

var CMark = require("commonmark");
var VNode = require("virtual-dom/vnode/vnode");
var VText = require("virtual-dom/vnode/vtext");

exports.parseAST = function (markdown) {
  var reader = new CMark.Parser();
  var parsed = reader.parse(markdown);
  var walker = parsed.walker();

  var stack = [];
  var event = undefined;
  while (event = walker.next()) {
    var node = event.node;
    if (!event.entering) {
      // TODO props
      var children = stack.shift();
      var current = new VNode(node.type, {}, children);
      if (stack.length) {
        stack[0].push(current);
      } else {
        return current;
      }
    } else if (node.isContainer()) {
      stack.unshift([]);
    } else if (node.type === "Text") {
      var text = new VText(node.literal);
      stack[0].push(text);
    } else if (node.type === "CodeBlock") {
      var lines = node.literal.split("\n");
      lines.pop();
      lines = lines.map(function (line) {
        return new VText(line);
      });
      var code = new VNode(node.type, {}, lines);
      stack[0].push(code);
    } else {
      // TODO props
      // TODO literal inside it
      var leaf = new VNode(node.type, {});
      stack[0].push(leaf);
    }
  }

  throw new Error("Oops, can't create AST. It shouldn't happen...");
};
"use strict";

var shapes = {
  document: "note",
  block: "box",
  inline: "oval" };


var solarizedLight = {
  back: "#fdf6e3",
  fill: "#eee8d5",
  font: "#073642",
  strg: "#586e75",
  edge: "#002b36",
  code: "#268bd2" };

var solarizedDark = {
  back: "#002b36",
  fill: "#073642",
  font: "#fdf6e3",
  strg: "#eee8d5",
  edge: "#93a1a1",
  code: "#2aa198" };

exports.palettes = { solarizedLight: solarizedLight, solarizedDark: solarizedDark };


var defaults = {
  palette: solarizedLight,
  fontsize: 14,
  fontname: "Inconsolata" };


exports.exportDot = function (ast, filename) {
  var options = arguments[2] === undefined ? {} : arguments[2];
  var pal = options.palette || defaults.palette;
  var size = options.fontsize || defaults.fontsize;
  var font = options.fontname || defaults.fontname;

  var out = ["digraph \"" + filename + "\" {", "graph [rankdir=\"LR\", bgcolor=\"" + pal.back + "\"];", "node [style=\"filled\", fontcolor=\"" + pal.font + "\", fillcolor=\"" + pal.fill + "\", color=\"" + pal.edge + "\", fontsize=" + size + ", fontname=\"" + font + "\"];", "edge [color=\"" + pal.edge + "\"];"];
  var n = 0;

  var builder = function (items, parent) {
    var ids = [];
    for (var _iterator = items[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {
      var item = _step.value;
      var id = n++;
      var children = [];
      var shape = shapes.inline;
      var label = item.tagName;
      var more = "";
      if (item.children) {
        children = builder(item.children, item.tagName);
        shape = shapes.block;
      }
      if (item.tagName === "Document") {
        shape = shapes.document;
      } else if (parent === "CodeBlock" || parent === "Code") {
        label = item.text;
        more = ", fontcolor=\"" + pal.code + "\"";
      } else if (item.type === "VirtualText") {
        label = "'" + item.text + "'";
        more = ", fontcolor=\"" + pal.strg + "\"";
      } else if (item.tagName === "Link" || item.tagName === "Image") {
        more = ", href=\"" + item.properties.href + "\"";
      }
      label = label.replace(/["\\]/g, "\\$&");
      out.push("  n" + id + " [label=\"" + label + "\", shape=\"" + shape + "\"" + more + "];");
      for (var _iterator2 = children[Symbol.iterator](), _step2; !(_step2 = _iterator2.next()).done;) {
        var child = _step2.value;
        out.push("  n" + id + " -> n" + child + ";");
      }
      ids.push(id);
    }
    return ids;
  };

  builder([ast]);
  out.push("}");
  return out.join("\n");
};
//# sourceMappingURL=data:application/json;base64,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RyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN4QyxTQUFHLENBQUMsSUFBSSxTQUFRLEVBQUUsa0JBQWMsS0FBSyxvQkFBZSxLQUFLLFVBQU0sSUFBSSxRQUFNLENBQUM7QUFDMUUsNEJBQWtCLFFBQVE7WUFBakIsS0FBSztBQUNaLFdBQUcsQ0FBQyxJQUFJLFNBQVEsRUFBRSxhQUFVLEtBQUssT0FBSyxDQUFDO09BQ3hDO0FBQ0QsU0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNkO0FBQ0QsV0FBTyxHQUFHLENBQUM7R0FDWixDQUFDOztBQUVGLFNBQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDZixLQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2QsU0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQ3ZCLENBQUMiLCJmaWxlIjoibWRkaWZmLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQ01hcmsgPSByZXF1aXJlKFwiY29tbW9ubWFya1wiKTtcbmNvbnN0IFZOb2RlID0gcmVxdWlyZShcInZpcnR1YWwtZG9tL3Zub2RlL3Zub2RlXCIpO1xuY29uc3QgVlRleHQgPSByZXF1aXJlKFwidmlydHVhbC1kb20vdm5vZGUvdnRleHRcIik7XG5cbmV4cG9ydHMucGFyc2VBU1QgPSBmdW5jdGlvbihtYXJrZG93bikge1xuICBjb25zdCByZWFkZXIgPSBuZXcgQ01hcmsuUGFyc2VyKCk7XG4gIGNvbnN0IHBhcnNlZCA9IHJlYWRlci5wYXJzZShtYXJrZG93bik7XG4gIGNvbnN0IHdhbGtlciA9IHBhcnNlZC53YWxrZXIoKTtcblxuICBsZXQgc3RhY2sgPSBbXTtcbiAgbGV0IGV2ZW50O1xuICB3aGlsZSAoKGV2ZW50ID0gd2Fsa2VyLm5leHQoKSkpIHtcbiAgICBjb25zdCBub2RlID0gZXZlbnQubm9kZTtcbiAgICBpZiAoIWV2ZW50LmVudGVyaW5nKSB7XG4gICAgICAvLyBUT0RPIHByb3BzXG4gICAgICBjb25zdCBjaGlsZHJlbiA9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICBjb25zdCBjdXJyZW50ID0gbmV3IFZOb2RlKG5vZGUudHlwZSwge30sIGNoaWxkcmVuKTtcbiAgICAgIGlmIChzdGFjay5sZW5ndGgpIHtcbiAgICAgICAgc3RhY2tbMF0ucHVzaChjdXJyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobm9kZS5pc0NvbnRhaW5lcigpKSB7XG4gICAgICBzdGFjay51bnNoaWZ0KFtdKTtcbiAgICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gJ1RleHQnKSB7XG4gICAgICBjb25zdCB0ZXh0ID0gbmV3IFZUZXh0KG5vZGUubGl0ZXJhbCk7XG4gICAgICBzdGFja1swXS5wdXNoKHRleHQpO1xuICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAnQ29kZUJsb2NrJykge1xuICAgICAgbGV0IGxpbmVzID0gbm9kZS5saXRlcmFsLnNwbGl0KCdcXG4nKTtcbiAgICAgIGxpbmVzLnBvcCgpO1xuICAgICAgbGluZXMgPSBsaW5lcy5tYXAoKGxpbmUpID0+IG5ldyBWVGV4dChsaW5lKSk7XG4gICAgICBjb25zdCBjb2RlID0gbmV3IFZOb2RlKG5vZGUudHlwZSwge30sIGxpbmVzKTtcbiAgICAgIHN0YWNrWzBdLnB1c2goY29kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRPRE8gcHJvcHNcbiAgICAgIC8vIFRPRE8gbGl0ZXJhbCBpbnNpZGUgaXRcbiAgICAgIGNvbnN0IGxlYWYgPSBuZXcgVk5vZGUobm9kZS50eXBlLCB7fSk7XG4gICAgICBzdGFja1swXS5wdXNoKGxlYWYpO1xuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihcIk9vcHMsIGNhbid0IGNyZWF0ZSBBU1QuIEl0IHNob3VsZG4ndCBoYXBwZW4uLi5cIik7XG59O1xuIiwiY29uc3Qgc2hhcGVzID0ge1xuICBkb2N1bWVudDogXCJub3RlXCIsXG4gIGJsb2NrOiBcImJveFwiLFxuICBpbmxpbmU6IFwib3ZhbFwiLFxufTtcblxuXG5jb25zdCBzb2xhcml6ZWRMaWdodCA9IHtcbiAgYmFjazogXCIjZmRmNmUzXCIsXG4gIGZpbGw6IFwiI2VlZThkNVwiLFxuICBmb250OiBcIiMwNzM2NDJcIixcbiAgc3RyZzogXCIjNTg2ZTc1XCIsXG4gIGVkZ2U6IFwiIzAwMmIzNlwiLFxuICBjb2RlOiBcIiMyNjhiZDJcIixcbn07XG5cbmNvbnN0IHNvbGFyaXplZERhcmsgPSB7XG4gIGJhY2s6IFwiIzAwMmIzNlwiLFxuICBmaWxsOiBcIiMwNzM2NDJcIixcbiAgZm9udDogXCIjZmRmNmUzXCIsXG4gIHN0cmc6IFwiI2VlZThkNVwiLFxuICBlZGdlOiBcIiM5M2ExYTFcIixcbiAgY29kZTogXCIjMmFhMTk4XCIsXG59O1xuXG5leHBvcnRzLnBhbGV0dGVzID0geyBzb2xhcml6ZWRMaWdodCwgc29sYXJpemVkRGFyayB9O1xuXG5cbmNvbnN0IGRlZmF1bHRzID0ge1xuICBwYWxldHRlOiBzb2xhcml6ZWRMaWdodCxcbiAgZm9udHNpemU6IDE0LFxuICBmb250bmFtZTogXCJJbmNvbnNvbGF0YVwiLFxufTtcblxuXG5leHBvcnRzLmV4cG9ydERvdCA9IGZ1bmN0aW9uKGFzdCwgZmlsZW5hbWUsIG9wdGlvbnM9e30pIHtcbiAgY29uc3QgcGFsICA9IG9wdGlvbnMucGFsZXR0ZSAgfHwgZGVmYXVsdHMucGFsZXR0ZTtcbiAgY29uc3Qgc2l6ZSA9IG9wdGlvbnMuZm9udHNpemUgfHwgZGVmYXVsdHMuZm9udHNpemU7XG4gIGNvbnN0IGZvbnQgPSBvcHRpb25zLmZvbnRuYW1lIHx8IGRlZmF1bHRzLmZvbnRuYW1lO1xuXG4gIGxldCBvdXQgPSBbYGRpZ3JhcGggXCIkeyBmaWxlbmFtZSB9XCIge2AsXG4gICAgICAgICAgICAgYGdyYXBoIFtyYW5rZGlyPVwiTFJcIiwgYmdjb2xvcj1cIiR7IHBhbC5iYWNrIH1cIl07YCxcbiAgICAgICAgICAgICBgbm9kZSBbc3R5bGU9XCJmaWxsZWRcIiwgZm9udGNvbG9yPVwiJHsgcGFsLmZvbnQgfVwiLCBmaWxsY29sb3I9XCIkeyBwYWwuZmlsbCB9XCIsIGNvbG9yPVwiJHsgcGFsLmVkZ2UgfVwiLCBmb250c2l6ZT0keyBzaXplIH0sIGZvbnRuYW1lPVwiJHsgZm9udCB9XCJdO2AsXG4gICAgICAgICAgICAgYGVkZ2UgW2NvbG9yPVwiJHsgcGFsLmVkZ2UgfVwiXTtgXG4gICAgICAgICAgICBdO1xuICBsZXQgbiA9IDA7XG5cbiAgdmFyIGJ1aWxkZXIgPSBmdW5jdGlvbihpdGVtcywgcGFyZW50KSB7XG4gICAgbGV0IGlkcyA9IFtdO1xuICAgIGZvciAobGV0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgIGxldCBpZCA9IG4rKztcbiAgICAgIGxldCBjaGlsZHJlbiA9IFtdO1xuICAgICAgbGV0IHNoYXBlID0gc2hhcGVzLmlubGluZTtcbiAgICAgIGxldCBsYWJlbCA9IGl0ZW0udGFnTmFtZTtcbiAgICAgIGxldCBtb3JlID0gXCJcIjtcbiAgICAgIGlmIChpdGVtLmNoaWxkcmVuKSB7XG4gICAgICAgIGNoaWxkcmVuID0gYnVpbGRlcihpdGVtLmNoaWxkcmVuLCBpdGVtLnRhZ05hbWUpO1xuICAgICAgICBzaGFwZSA9IHNoYXBlcy5ibG9jaztcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtLnRhZ05hbWUgPT09IFwiRG9jdW1lbnRcIikge1xuICAgICAgICBzaGFwZSA9IHNoYXBlcy5kb2N1bWVudDtcbiAgICAgIH0gZWxzZSBpZiAocGFyZW50ID09PSBcIkNvZGVCbG9ja1wiIHx8IHBhcmVudCA9PT0gXCJDb2RlXCIpIHtcbiAgICAgICAgbGFiZWwgPSBpdGVtLnRleHQ7XG4gICAgICAgIG1vcmUgPSBgLCBmb250Y29sb3I9XCIkeyBwYWwuY29kZSB9XCJgO1xuICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09IFwiVmlydHVhbFRleHRcIikge1xuICAgICAgICBsYWJlbCA9IGAnJHsgaXRlbS50ZXh0IH0nYDtcbiAgICAgICAgbW9yZSA9IGAsIGZvbnRjb2xvcj1cIiR7IHBhbC5zdHJnIH1cImA7XG4gICAgICB9IGVsc2UgaWYgKGl0ZW0udGFnTmFtZSA9PT0gXCJMaW5rXCIgfHwgaXRlbS50YWdOYW1lID09PSBcIkltYWdlXCIpIHtcbiAgICAgICAgbW9yZSA9IGAsIGhyZWY9XCIkeyBpdGVtLnByb3BlcnRpZXMuaHJlZiB9XCJgO1xuICAgICAgfVxuICAgICAgbGFiZWwgPSBsYWJlbC5yZXBsYWNlKC9bXCJcXFxcXS9nLCBcIlxcXFwkJlwiKTtcbiAgICAgIG91dC5wdXNoKGAgIG4keyBpZCB9IFtsYWJlbD1cIiR7IGxhYmVsIH1cIiwgc2hhcGU9XCIkeyBzaGFwZSB9XCIkeyBtb3JlIH1dO2ApO1xuICAgICAgZm9yIChsZXQgY2hpbGQgb2YgY2hpbGRyZW4pIHtcbiAgICAgICAgb3V0LnB1c2goYCAgbiR7IGlkIH0gLT4gbiR7IGNoaWxkIH07YCk7XG4gICAgICB9XG4gICAgICBpZHMucHVzaChpZCk7XG4gICAgfVxuICAgIHJldHVybiBpZHM7XG4gIH07XG5cbiAgYnVpbGRlcihbYXN0XSk7XG4gIG91dC5wdXNoKCd9Jyk7XG4gIHJldHVybiBvdXQuam9pbihcIlxcblwiKTtcbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=